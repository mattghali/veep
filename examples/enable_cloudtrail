#!/usr/bin/env python

# Script to enable CloudTrail across all regions.

from veep import Config, IAM, SNS, VPC
import boto.exception, boto.sns, boto.sqs, boto.cloudtrail, boto.s3, boto.logs


ct_princ = IAM.P_aws([
          "arn:aws:iam::903692715234:root",
          "arn:aws:iam::859597730677:root",
          "arn:aws:iam::814480443879:root",
          "arn:aws:iam::216624486486:root",
          "arn:aws:iam::086441151436:root",
          "arn:aws:iam::388731089494:root",
          "arn:aws:iam::284668455005:root",
          "arn:aws:iam::113285607260:root",
          "arn:aws:iam::035351147821:root" ])


def create_bucket(conn, region, name):
    conn.create_bucket(name, location=region)
    principal = ct_princ
    statement1 = IAM.Statement(sid='CloudTrailAclCheck',
                                principal=principal,
                                actions=['s3:GetBucketAcl'],
                                resources=['arn:aws:s3:::' + name])
    statement2 = IAM.Statement(sid='CloudTrailWrite',
                                principal=principal,
                                actions=['s3:PutObject'],
                                resources=['arn:aws:s3:::' + name + '/*'],
                                conditions=IAM.Condition('StringEquals',
                                            's3:x-amz-acl',
                                            'bucket-owner-full-control'))
    policy = IAM.Policy(statements=[statement1, statement2])
    bucket = conn.get_bucket(name)
    bucket.set_policy(str(policy))
    return bucket


def create_role(conn, name):
    assume_statement = IAM.Statement(principal={'Service': 'cloudtrail.amazonaws.com'},
                                     sid='AssumeRole', actions=['sts:AssumeRole'])
    assume_statement.pop('Resource')
    assume_policy = IAM.Policy(statements=[assume_statement])
    role = IAM.create_role(conn, name=name, path='/service/', assume_role_policy_document=str(assume_policy))
    statement = IAM.Statement(sid='CloudTrailCreatePutLog',
                               actions=['logs:CreateLogStream', 'logs:PutLogEvents'],
                               resources=['arn:aws:logs:' + r.name + '::log-group:CloudTrail/logs:*'
                                            for r in VPC.get_regions()])
    statement.pop('Principal')
    policy = IAM.Policy(id='CloudTrailLogs', statements=[statement])
    conn.put_role_policy(role.name, 'CloudTrailLogs', policy)
    return role


def create_topic(conn, name):
    topic = SNS.create_topic(conn, name)
    principal = ct_princ
    statement = IAM.Statement(sid='CloudTrailSNSPolicy',
                              principal=principal,
                              actions=['SNS:Publish'],
                              resources=[topic.arn])
    policy = IAM.Policy(statements=[statement])
    conn.set_topic_attributes(topic.arn, 'Policy', policy)
    return topic
    


if __name__ == '__main__':
    # Create s3 bucket
    s3conn = boto.s3.connect_to_region(Config.home_region)
    try:
        bucket = s3conn.get_bucket(Config.ct_bucket)
    except boto.exception.S3ResponseError, e:
        if e[0] == 404:
            bucket = create_bucket(s3conn, Config.home_region, Config.ct_bucket)
        else:
            raise

    # Create cloudtrail role for cloudwatch logs
    iamconn = IAM.connect()
    role = IAM.get_role(iamconn, name='Cloudtrail_CloudwatchLogs')
    if not role:
        role = create_role(iamconn, name='Cloudtrail_CloudwatchLogs')


    #for region in VPC.get_regions():
    for region in [ VPC.Region('us-west-2')]:
        # Create SNS topic
        snsconn = SNS.connect(region.name)
        topic = SNS.get_topic(snsconn, 'cloudtrail')
        if not topic:
            topic = create_topic(snsconn, 'cloudtrail')

        # Create Cloudwatch Logs log group
        logconn = boto.logs.connect_to_region(region.name)
        if len(logconn.describe_log_groups('CloudTrail/logs')['logGroups']) < 1:
            logconn.create_log_group('CloudTrail/logs')
        lg_arn = logconn.describe_log_groups('CloudTrail/logs')['logGroups'][0]['arn']

        # Create trails
        ctconn = boto.cloudtrail.connect_to_region(region.name)
        configured = False
        trails = ctconn.describe_trails()['trailList']
        for trail in trails:
            if trail['Name'] == region.name:
                configured = True
        if not configured:
            print role.arn, lg_arn
            ctconn.create_trail(region.name, Config.ct_bucket, s3_key_prefix=region.name,
                            sns_topic_name=topic.name,
                            include_global_service_events=(region.name == Config.home_region),
                            cloud_watch_logs_role_arn=role.arn, cloud_watch_logs_log_group_arn=lg_arn)
        if not ctconn.get_trail_status('us-west-2')['IsLogging']:
            ctconn.start_logging(region.name)


