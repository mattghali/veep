#!/usr/bin/env python

# create NAT instance asgs for each vpc.

import boto.ec2, boto.ec2.autoscale, boto.vpc, netaddr, sys, time
from veep import Config, IAM, SNS, VPC


if __name__ == '__main__':

    # Create a Role for NAT instances, attach policy allowing reqd ops
    conn = IAM.connect()
    role = conn.get_role('NatInstance')
    if not role:
        role = conn.create_role('NatInstance', path='/instance/')
        statement = IAM.Statement(sid='NatPolicy',
                                  actions=['ec2:DescribeTags', 'ec2:ModifyInstanceAttribute',
                                           'ec2:CreateRoute', 'ec2:ReplaceRoute'],
                                  resources=['*'])
        statement.pop('Principal')
        policy = IAM.Policy(id=statement['Sid'], statements=[statement])
        role.put_policy(policy)

    profile = conn.get_instance_profile(role.name)
    if not profile:
        profile = conn.create_instance_profile(role.name)
        profile.add_role(role)

    for region in VPC.get_regions():
    
        # Find an Amazon Linux minimal AMI ID (default for method)
        images = region.get_images(root_type='ebs')
        if len(images) > 0:
            # get latest image
            imageid = images[-1].id

        for vpc in region.find_vpcs():
            if vpc.get_env() == 'analytics': continue

            # Find and update security group
            secgrp = None
            groups = vpc.get_secgrps(names=['NAT'])
            if len(groups) == 1:
                groups[0].delete()

            rules = list()
            rules.append(vpc.sg_rule(ip_protocol=-1, from_port=None, to_port=None, grants=[vpc.cidr_block]))
            group = vpc.create_secgrp(name='NAT', description='NAT Instances', rules=rules)
            group.add_tag('Name', 'NAT')
            secgrp = group.id

            # get list of pub tier subnets
            tier = vpc.get_tiers(name='frontend')
            pub_subnets = [ subnet.id for subnet in tier.subnets]

            table = vpc.get_tables(name='NAT')
            nat_tableid = table.id

            asgname = vpc.get_name() + '-nat'

            # Delete old ASG
            groups = region.asconn.get_all_groups(names=[asgname])
            for group in groups:
                region.asconn.delete_auto_scaling_group(group.name, force_delete=True)

            # Delete old launch config
            lcs = region.asconn.get_all_launch_configurations(names=[asgname])
            for old_lc in lcs:
                region.asconn.delete_launch_configuration(old_lc.name)

            # wait for old ASG to delete
            groups = region.asconn.get_all_groups(names=[asgname])
            while len(groups) > 0:
                time.sleep(1)
                groups = region.asconn.get_all_groups(names=[asgname])

            # Create launch config
            inst_type = 't2.micro'
            lc = boto.ec2.autoscale.launchconfig.LaunchConfiguration(name=asgname, image_id=imageid,
                                        key_name=vpc.get_name(), security_groups=[secgrp],
                                        user_data=Config.userdata, instance_type=inst_type,
                                        instance_monitoring=True, instance_profile_name=profile.name,
                                        associate_public_ip_address=True)

            launchconfig = region.asconn.create_launch_configuration(lc)

            grouptags = [('Type', 'nat'), ('TableID', nat_tableid), ('Name', asgname) ]
            tags = []
            for t in grouptags:
                (key, value) = t
                tag = boto.ec2.autoscale.tag.Tag(key=key, value=value, resource_id=asgname,
                                            propagate_at_launch=True, resource_type='auto-scaling-group')
                tags.append(tag)

            # Create ASG
            asg = boto.ec2.autoscale.group.AutoScalingGroup(name=asgname, launch_config=lc,
                                        health_check_type='EC2', max_size=1, min_size=0, desired_capacity=0,
                                        vpc_zone_identifier=pub_subnets, tags=tags)
            autoscale = region.asconn.create_auto_scaling_group(asg)

            # Add SNS notification config to asg
            snsconn = SNS.connect_to_region(region.name)
            asgtopic = snsconn.get_topic(vpc.get_name() + '-autoscaling')
            if asgtopic:
                notification_types = [ 'autoscaling:EC2_INSTANCE_LAUNCH',
                                       'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
                                       'autoscaling:EC2_INSTANCE_TERMINATE',
                                       'autoscaling:EC2_INSTANCE_TERMINATE_ERROR',
                                       'autoscaling:TEST_NOTIFICATION' ]

                region.asconn.put_notification_configuration(asgname, asgtopic.arn, notification_types)

            print "created", asgname
