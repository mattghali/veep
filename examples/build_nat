#!/usr/bin/env python

# create NAT instance asgs for each vpc.

import boto.ec2, boto.ec2.autoscale, boto.vpc, netaddr, sys, time
from veep import Config, SNS, VPC


if __name__ == '__main__':

    for region in VPC.get_regions():
        for vpc in region.find_vpcs():

            # Find or create nat instance sec group
            secgrp = None
            groups = vpc.get_secgrps(names=['NAT'])
            if len(groups) == 1:
                secgrp = groups[0].id
            else:
                rules = list()
                for proto in ['tcp', 'udp', 'icmp']:
                    rules.append(vpc.sg_rule(ip_protocol=proto, from_port=0, to_port=0, grants=[vpc.cidr_block]))
                group = vpc.create_secgrp(name='NAT', description='NAT Instances', rules=rules)
                group.add_tag('Name', 'NAT')
                secgrp = group.id

            # Find an Amazon Linux minimal AMI ID (default for method)
            images = region.get_images()
            if len(images) > 0:
                # get latest image
                imageid = images[-1].id

            # get list of pub tier subnets
            tier = vpc.get_tiers(name='frontend')
            pub_subnets = [ subnet.id for subnet in tier.subnets]

            table = vpc.get_tables(name='NAT')
            nat_tableid = table.id

            asgname = vpc.get_name() + '-nat'

            # Delete old ASG
            groups = region.asconn.get_all_groups(names=[asgname])
            for group in groups:
                region.asconn.delete_auto_scaling_group(group.name, force_delete=True)

            # Delete old launch config
            lcs = region.asconn.get_all_launch_configurations(names=[asgname])
            for old_lc in lcs:
                region.asconn.delete_launch_configuration(old_lc.name)

            # wait for old ASG to delete
            groups = region.asconn.get_all_groups(names=[asgname])
            while len(groups) > 0:
                time.sleep(1)
                groups = region.asconn.get_all_groups(names=[asgname])

            # Create launch config
            inst_type = 'm3.medium'
            lc = boto.ec2.autoscale.launchconfig.LaunchConfiguration(name=asgname, image_id=imageid,
                                        key_name=vpc.get_env(), security_groups=[secgrp],
                                        user_data=Config.userdata, instance_type=inst_type,
                                        instance_monitoring=True, instance_profile_name='GenericInstance',
                                        associate_public_ip_address=True)

            launchconfig = region.asconn.create_launch_configuration(lc)

            grouptags = [('Type', 'nat'), ('TableID', nat_tableid) ]
            tags = []
            for t in grouptags:
                (key, value) = t
                tag = boto.ec2.autoscale.tag.Tag(key=key, value=value, resource_id=asgname,
                                            propagate_at_launch=True, resource_type='auto-scaling-group')
                tags.append(tag)

            # Create ASG
            asg = boto.ec2.autoscale.group.AutoScalingGroup(name=asgname, launch_config=lc,
                                        health_check_type='EC2', max_size=1, min_size=0, desired_capacity=0,
                                        vpc_zone_identifier=pub_subnets, tags=tags)
            autoscale = region.asconn.create_auto_scaling_group(asg)

            # Add SNS notification config to asg
            snsconn = SNS.connect_to_region(region.name)
            asgtopic = snsconn.get_topic(vpc.get_name() + '-autoscaling')
            if asgtopic:
                notification_types = [ 'autoscaling:EC2_INSTANCE_LAUNCH',
                                       'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
                                       'autoscaling:EC2_INSTANCE_TERMINATE',
                                       'autoscaling:EC2_INSTANCE_TERMINATE_ERROR',
                                       'autoscaling:TEST_NOTIFICATION' ]

                region.asconn.put_notification_configuration(asgname, asgtopic.arn, notification_types)

            print "created", asgname
